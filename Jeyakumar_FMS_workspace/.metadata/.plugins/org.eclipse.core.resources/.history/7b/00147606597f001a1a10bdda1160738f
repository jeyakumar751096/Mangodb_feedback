package com.fms.reactiveservice.FeedBackApplication.Service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.fms.reactiveservice.FeedBackApplication.entity.UnRegisteredFeedback;
import com.fms.reactiveservice.FeedBackApplication.entity.UnRegisteredFeedback;
import com.fms.reactiveservice.FeedBackApplication.repositories.UnRegisteredFeedbackRepository;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class UnRegisteredFeedbackService {
	
	@Autowired
	public UnRegisteredFeedbackRepository unRegisteredFeedbackRepository;
	
	public Mono<UnRegisteredFeedback> createUnRegistered(UnRegisteredFeedback unRegisteredFeedback) {
		return unRegisteredFeedbackRepository.save(unRegisteredFeedback);
	}
	
	public Mono<UnRegisteredFeedback> getUnRegisteredFeedback(Integer employeeId) {
		return unRegisteredFeedbackRepository.findByemployeeId(employeeId);
	}
	
	public Flux<UnRegisteredFeedback> getUnRegisteredFeedback() {
		return unRegisteredFeedbackRepository.findAll();
	}
	
	public Mono<UnRegisteredFeedback> updateUnRegisteredFeedback(UnRegisteredFeedback unRegisteredFeedback,
			Integer employeeId) {		
		return unRegisteredFeedbackRepository.findByemployeeId(employeeId).flatMap(existing -> {
			existing.setEmployeeId(unRegisteredFeedback.getEmployeeId());
			existing.setEventId(unRegisteredFeedback.getEventId());
			existing.setQuestionId(unRegisteredFeedback.getQuestionId());
			existing.setAnswerId(unRegisteredFeedback.getAnswerId());
			existing.getEventName(unRegisteredFeedback.getEventName());
			existing.getBaseLocation();
			existing.getBeneficiaryName();
			return unRegisteredFeedbackRepository.save(existing);
		});
	}
	
	
	public Flux<UnRegisteredFeedback> getFeedbackTypeQuestions(String feedbackType){
		return unRegisteredFeedbackRepository.findByfeedbackType(feedbackType);
	}
	
	public Mono<ResponseEntity<Void>> deleteQuestionId( Integer questionId) {
		return unRegisteredFeedbackRepository.findByquestionId(questionId)
				.flatMap(existingQnA -> unRegisteredFeedbackRepository.delete(existingQnA)
						.then(Mono.just(new ResponseEntity<Void>(HttpStatus.OK))))
				.defaultIfEmpty(new ResponseEntity<Void>(HttpStatus.NOT_FOUND));
	}
	


}
